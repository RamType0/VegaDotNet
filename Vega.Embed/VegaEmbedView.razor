@using Microsoft.JSInterop
@using System.Text.Json
@using System.Text.Json.Nodes
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
<div @ref="@div"/>

@code {
    [Parameter]
    public string? VegaSpecJson { get; set; }
    [Parameter]
    public Uri? VegaSpecJsonUri { get; set; }
    [Parameter]
    public EmbedOptions? Options { get; set; }
    ElementReference div;
    readonly TaskCompletionSource firstRenderTcs = new();
    IAsyncDisposable? vegaEmbedResult;
    protected override async Task OnParametersSetAsync()
    {
        await firstRenderTcs.Task;
        await FinalizeCurrentResultAsync();
        if(VegaSpecJson is not null)
        {
            var spec = JsonSerializer.Deserialize<JsonObject>(VegaSpecJson) ?? throw new FormatException($"{nameof(VegaSpecJson)} represents null.");
            vegaEmbedResult = await JSRuntime.VegaEmbedAsync(div, spec, Options);
        }
        else if (VegaSpecJsonUri is not null)
        {
            vegaEmbedResult = await JSRuntime.VegaEmbedAsync(div, VegaSpecJsonUri, Options);
        }
        else
        {
            throw new ArgumentException($"Either {nameof(VegaSpecJson)} or {nameof(VegaSpecJsonUri)} must be provided.");

        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            firstRenderTcs.SetResult();
        }
    }
    public ValueTask FinalizeCurrentResultAsync()
    {
        if (vegaEmbedResult is not null)
        {
            var vegaEmbedResult = this.vegaEmbedResult;
            this.vegaEmbedResult = null;
            return vegaEmbedResult.DisposeAsync();
        }
        else
        {
            return new();
        }
    }
    public ValueTask DisposeAsync() => FinalizeCurrentResultAsync();
}